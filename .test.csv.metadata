{"timestamp": 1687182928.037091, "stored_source_code": "upstream = None\nproduct = None\n\nimport warnings\nimport pandas as pd\nfrom sklearn.preprocessing import MultiLabelBinarizer\n\nwarnings.filterwarnings('ignore')\n\nmlb = MultiLabelBinarizer()\ntrain = pd.read_json('train_products.json').T\ntest = pd.read_json('test_products.json').T\ntrain['test_ingredients'] = train.ingredients.apply(lambda x: [i['id'] for i in x] if x != 'unknown' else ['unknown'])\ntest['test_ingredients'] = test.ingredients.apply(lambda x: [i['id'] for i in x] if x != 'unknown' else ['unknown'])\n# temp = mlb.fit_transform(pd.concat([train.pop('test_ingredients'), test.pop('test_ingredients')]))\n# train = train.join(pd.DataFrame(temp[:len(train),:],\n#                           columns=mlb.classes_,\n#                           index=train.index))\n\n# test = test.join(pd.DataFrame(temp[len(train):,:],\n#                           columns=mlb.classes_,\n#                           index=test.index))\n# # %%\n# def fill_percentages(df):\n#     for index, i in enumerate(df.ingredients):\n#         if i == 'unknown':\n#             df.unknown.iloc[index] = 100\n#         else:\n#             for ingredient in i:\n#                 df[ingredient['id']].iloc[index] = ingredient['percent_estimate']\n#     return df\n            \n# # %%\n# train = fill_percentages(train)\n# test = fill_percentages(test)\ntrain.to_csv(product['train_csv'], index=False)\ntest.to_csv(product['test_csv'], index=False)", "params": {"file_train_data": "./data/train_products.json", "file_test_data": "./data/test_products.json"}}